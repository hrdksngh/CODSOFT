#include <iostream>
#include <bits/stdc++.h>
using namespace std;

struct Task { 
    string name; 
    bool status = false; 
};

class TaskList {
private: 
    vector<Task> tasks;
public:
    void AddTask(const string& name) { 
        tasks.push_back({name}), cout << "Task Added: " << name << " | Status: Pending\n"; 
    }
    void DisplayTasks() const { 
        for (size_t i = 0; i < tasks.size(); ++i) 
        cout << i + 1 << ". " << tasks[i].name << " | Status: " << (tasks[i].status ? "Completed" : "Pending") << endl; 
        }
    void StatusUpdate(int index) { 
        if (index < tasks.size()) tasks[index].status = true, cout << "Task Marked As Completed! " << tasks[index].name << endl; 
        else cout << "Invalid Task Index!\n"; 
    }
    void TrashTask(int index) { 
        if (index < tasks.size()) cout << "Removed Task: " << tasks[index].name << endl, tasks.erase(tasks.begin() + index); 
        else cout << "Invalid Task Index!\n"; 
    }
};

int main() {
    TaskList LIST;
    while (true) {
        cout << "\nMenu:\n1. Add Task\n2. View Tasks\n3. Mark Task As Completed\n4. Remove Task\n5. Quit\nEnter Your Choice: ";
        int choice, index;
        string name;
        cin >> choice;
        switch (choice) {
            case 1: 
                cout << "Enter The Task's Name: "; 
                cin.ignore(), getline(cin, name), LIST.AddTask(name); 
                break;
            case 2: 
                LIST.DisplayTasks(); 
                break;
            case 3: 
            case 4: 
                cout << "Enter The Index Of The Task: "; 
                cin >> index; 
                (choice == 3) ? LIST.StatusUpdate(index - 1) : LIST.TrashTask(index - 1); 
                break;
            case 5: 
                return 0;
            default: 
                cout << "Enter A Valid Choice.\n";
        }
    }
}
